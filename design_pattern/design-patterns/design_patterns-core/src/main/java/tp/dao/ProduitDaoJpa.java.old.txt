package tp.dao;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import tp.entity.Produit;

public class ProduitDaoJpa implements ProduitDao {
	
	private static Logger logger = LoggerFactory.getLogger(ProduitDaoJpa.class);
	
	
	private static EntityManagerFactory emf =null;
	
	
	public static EntityManagerFactory getEntityManagerFactory(){
		if(emf==null){
			//NB: myPersistenceUnit configuré dans META-INF/persistence.xml
		    emf = Persistence.createEntityManagerFactory("myPersistenceUnit");
		}
		return emf;
	}
	
    public void cleanUpResources(){
		logger.info("close entityManagerFactory");
		emf.close(); //idéalement entityManagerFactory.close(); en fin d'execution de l'application
	}
	idéalement entityManagerFactory.close(); en fin d'execution de l'application
	
	private EntityManager getEntityManager()
	{
		EntityManager em = null;
		em=getEntityManagerFactory().createEntityManager();
		return em;
	}
	


	@Override
	public Produit createProduit(Produit nouveauProduit) {
		EntityManager em = this.getEntityManager();
		em.getTransaction().begin();
		try {
			em.persist(nouveauProduit);//pk updated (auto_increment)
			em.getTransaction().commit();
		} catch (RuntimeException e) {
			em.getTransaction().rollback();
			logger.error("error createProduit :",e);
		}
		finally{
			em.close();
		}
		return nouveauProduit;
	}
	
	
	@Override
	public void deleteProduit(Produit p) {
		EntityManager em = this.getEntityManager();
		em.getTransaction().begin();
		try {
			if(em.contains(p)){
			     em.remove(p); //persistent and ready to  be remvoved
			}else{
				Produit prod = em.find(Produit.class, p.getReference());
				em.remove(prod);
			}
			em.getTransaction().commit();
		} catch (RuntimeException e) {
			em.getTransaction().rollback();
			logger.error("error deleteProduit :",e);
		}
		finally{
			em.close();
		}
	}

	@Override
	public List<Produit> getAllProduits() {
		List<Produit> listeProd = new ArrayList<Produit>();
		EntityManager em = this.getEntityManager();
		//em.getTransaction().begin();
		try {
			listeProd = em.createQuery("SELECT p from Produit p",Produit.class).getResultList();
			//em.getTransaction().commit();
		} catch (RuntimeException e) {
			//em.getTransaction().rollback();
			logger.error("error getAllProduits :",e);
		}
		finally{
			em.close();
		}
		return listeProd;
	}
	
	
	

	@Override
	public Produit getProduitByRef(long ref) {
		Produit prod=null;
		EntityManager em = this.getEntityManager();
		//em.getTransaction().begin();
		try {
			prod = em.find(Produit.class, ref);
			//em.getTransaction().commit();
		} catch (RuntimeException e) {
			//em.getTransaction().rollback();
			logger.error("error getProduitByRef :",e);
		}
		finally{
			em.close();
		}
		return prod;
	}

	@Override
	public void updateProduit(Produit p) {
		EntityManager em = this.getEntityManager();
		em.getTransaction().begin();
		try {
			em.merge(p);
			em.getTransaction().commit();
		} catch (RuntimeException e) {
			em.getTransaction().rollback();
			logger.error("error updateProduit :",e);
		}
		finally{
			em.close();
		}
	}

}
