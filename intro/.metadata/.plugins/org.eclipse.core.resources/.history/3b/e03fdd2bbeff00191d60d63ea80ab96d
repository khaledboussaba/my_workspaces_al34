package fr.afcepf.al34.authentication;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;

public class AuthenticationManager {

	private static final int SALT_LENGTH = 6;
	private static final int MIN_SALT_CHAR_INDEX = '0'; //33
	private static final int MAX_SALT_CHAR_INDEX = 'z'; //127
	private static Random random = new Random();

	private static String createSalt() {
		String salt = "";
		for (int i = 0; i < SALT_LENGTH; i++) {
			int nb = random.nextInt(MAX_SALT_CHAR_INDEX - MIN_SALT_CHAR_INDEX) + MIN_SALT_CHAR_INDEX;
			salt += (char)nb;
		}
		return salt;
	}

	public static void initializeCredentials(String clearPassword, Credentials credentials) throws Exception {
		//TODO : Use log4j
		
		String salt = createSalt();
		credentials.setSalt(salt);
		System.out.println("Salt generated : " + credentials.getSalt());
		String saltedPassword = clearPassword + salt;
		System.out.println("ClearPassword after adding salt : " + saltedPassword);
		String hashedPassword = generateHash(saltedPassword);
		credentials.setHashedPassword(hashedPassword);
		System.out.println("Hash generated : " + credentials.getHashedPassword());
        
	}
	
	private static String generateHash(String source) throws Exception {
		try {
			MessageDigest md = MessageDigest.getInstance("SHA-256");
			byte[] bytes = md.digest((source).getBytes(StandardCharsets.UTF_8));			
			// bytes to hexadecimal
			StringBuilder sb = new StringBuilder();
			for (byte b : bytes) {
				sb.append(String.format("%02x", b));
			}
			return sb.toString();
		} catch (NoSuchAlgorithmException e) {
			throw new Exception("Echec de hashage du mot de passe !!!", e); //le "e" sur cette ligne indique le caused by de l'exception
		} 
		
	}
	
	public static boolean authenticate(String clearPassword, Credentials credentials) throws Exception {
		
		//TODO : regénérer le hash à partir du clearPasswor + le salt du credentials
		
		String test = generateHash(clearPassword + credentials.getSalt());
		
		//TODO : comparer le resultat avec le hashedPassword du credentials
		
		if (test.equals(credentials.getHashedPassword())) {
			return true;
		}
		
		return false;
	}
	

	public static int getSaltLength() {
		return SALT_LENGTH;
	}

}
